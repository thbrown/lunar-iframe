{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleVoltageChange","value","setState","voltage","target","handleRadiusChange","radius","handleDistanceChange","stuff","distance","state","VACUUM_PERMITTIVITY","COULOMBS_CONSTANT","WATER_DENSITY","DIGITS","x","unit","fdigits","prefixes","prefix","base","power","symbol","name","i","length","Math","pow","parseFloat","toFixed","capacitance","PI","this","charge","attractiveForce","distanceFromTop","repulsiveForce","volume","mass","acceleration","className","type","onChange","Slider","step","max","min","valueLabelDisplay","formatMetric","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAAEC,QAASF,EAAMG,OAAOH,SAdrB,EAgBnBI,mBAAqB,SAACJ,GACpB,EAAKC,SAAS,CAAEI,OAAQL,EAAMG,OAAOH,SAjBpB,EAmBnBM,qBAAuB,SAACC,EAAOP,GAC7B,EAAKC,SAAS,CAAEO,SAAUR,KAlB1B,EAAKS,MAAQ,CACXP,QAAS,KACTG,OAAQ,KACRG,SAAU,KAEZ,EAAKE,oBAAsB,QAC3B,EAAKC,kBAAoB,iBACzB,EAAKC,cAAgB,IACrB,EAAKC,OAAS,EAVG,E,yDAuBNC,EAAGC,EAAMC,GACpB,IACIC,EAAW,CACb,EAAE,GAAI,IAAK,SACX,EAAE,GAAI,IAAK,SACX,EAAE,GAAI,IAAK,QACX,EAAE,GAAI,IAAK,SACX,EAAE,GAAI,IAAK,QACX,EAAE,EAAG,IAAK,QACV,EAAE,EAAG,OAAK,SACV,EAAE,EAAG,IAAK,QACV,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,IAAK,QACT,CAAC,EAAG,IAAK,QACT,CAAC,EAAG,IAAK,QACT,CAAC,GAAI,IAAK,QACV,CAAC,GAAI,IAAK,QACV,CAAC,GAAI,IAAK,OACV,CAAC,GAAI,IAAK,SACV,CAAC,GAAI,IAAK,UAGRC,EAAS,CACXC,KAAM,EACNC,MAAO,EACPC,OAAQ,GACRC,KAAM,IAGR,GAAU,IAANR,EAAS,CACX,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IAAK,CACxC,IAAIJ,EAAOM,KAAKC,IAAI,GAAIT,EAASM,GAAG,IACpC,KAAIT,GAAKK,GAOF,MANLD,EAAS,CACPC,KAAMA,EACNC,MAAOH,EAASM,GAAG,GACnBF,OAAQJ,EAASM,GAAG,GACpBD,KAAML,EAASM,GAAG,IAKxBT,GAAQI,EAAOC,KAOjB,OAJe,MAAXH,IACFF,EAAIa,WAAWb,EAAEc,QAAQZ,KAGpBF,EAAI,IAA4BI,EAAOG,QAAWN,GAAQ,M,+BAIjE,IAAIc,EACF,EAAIJ,KAAKK,GAAKC,KAAKrB,oBAAsBqB,KAAKtB,MAAMJ,OAClD2B,EAASH,EAAcE,KAAKtB,MAAMP,QAClC+B,EACFF,KAAKpB,mBACHqB,EAASA,GAAWD,KAAKtB,MAAMD,SAAWuB,KAAKtB,MAAMD,WACrD0B,EAAkB,IAAOH,KAAKtB,MAAMD,SACpC2B,EACFJ,KAAKpB,mBACHqB,EAASA,GAAWE,EAAkBA,IAEtCE,EAAS,IAAOX,KAAKK,GAAKL,KAAKC,IAAIK,KAAKtB,MAAMJ,OAAQ,GACtDgC,EAAON,KAAKnB,cAAgBwB,EAC5BE,GAAgBL,EAAkBE,GAAkBE,EAExD,OACE,sBAAKE,UAAU,MAAf,UACE,wCACA,8CACA,uBACEC,KAAK,OACLxC,MAAO+B,KAAKtB,MAAMP,QAClBuC,SAAUV,KAAKhC,sBAEjB,uBACA,kDACA,uBACEyC,KAAK,OACLxC,MAAO+B,KAAKtB,MAAMJ,OAClBoC,SAAUV,KAAK3B,qBAEjB,uBACA,+DACA,8BAAI2B,KAAKtB,MAAMD,SAAf,QACA,cAACkC,EAAA,EAAD,CACEC,KAAM,IACNC,IAAK,IACLC,IAAK,IACL7C,MAAO+B,KAAKtB,MAAMD,SAClBiC,SAAUV,KAAKzB,qBACfwC,kBAAkB,QAEpB,sBAAKP,UAAU,eAAf,UACE,qBAAKA,UAAU,OAAf,gCACA,qBAAKA,UAAU,QAAf,2BAEF,yCACA,yDACyB,IACvB,4BAAIR,KAAKgB,aAAalB,EAAa,IAAKE,KAAKlB,aAE/C,mDACkB,4BAAIkB,KAAKgB,aAAaf,EAAQ,IAAKD,KAAKlB,aAE1D,4DAC4B,IAC1B,4BAAIkB,KAAKgB,aAAad,EAAiB,IAAKF,KAAKlB,aAEnD,2DAC2B,IACzB,4BAAIkB,KAAKgB,aAAaZ,EAAgB,IAAKJ,KAAKlB,aAElD,8CACa,4BAAIkB,KAAKgB,aAAaV,EAAM,IAAKN,KAAKlB,aAEnD,qDACoB,8BAAIyB,EAAaV,QAAQG,KAAKlB,OAAS,GAAvC,sB,GA/IKmC,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cce0a89b.chunk.js","sourcesContent":["import \"./App.css\";\nimport Slider from \"@material-ui/core/Slider\";\nimport React, { Component } from \"react\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      voltage: 160000,\n      radius: 0.001,\n      distance: 0.14,\n    };\n    this.VACUUM_PERMITTIVITY = 0.00000000000885;\n    this.COULOMBS_CONSTANT = 8987551787.36817;\n    this.WATER_DENSITY = 1000000; // g/m^3\n    this.DIGITS = 3;\n  }\n\n  handleVoltageChange = (value) => {\n    this.setState({ voltage: value.target.value });\n  };\n  handleRadiusChange = (value) => {\n    this.setState({ radius: value.target.value });\n  };\n  handleDistanceChange = (stuff, value) => {\n    this.setState({ distance: value });\n  };\n\n  formatMetric(x, unit, fdigits) {\n    let long = false;\n    let prefixes = [\n      [-24, \"y\", \"yocto\"],\n      [-21, \"z\", \"zepto\"],\n      [-18, \"a\", \"atto\"],\n      [-15, \"f\", \"femto\"],\n      [-12, \"p\", \"pico\"],\n      [-9, \"n\", \"nano\"],\n      [-6, \"Âµ\", \"micro\"],\n      [-3, \"m\", \"mili\"],\n      [0, \"\", \"\"],\n      [3, \"K\", \"kilo\"],\n      [6, \"M\", \"mega\"],\n      [9, \"G\", \"giga\"],\n      [12, \"T\", \"tera\"],\n      [15, \"P\", \"peta\"],\n      [18, \"E\", \"exa\"],\n      [21, \"Z\", \"zetta\"],\n      [24, \"Y\", \"yotta\"],\n    ];\n\n    let prefix = {\n      base: 1,\n      power: 0,\n      symbol: \"\",\n      name: \"\",\n    };\n\n    if (x !== 0) {\n      for (var i = 0; i < prefixes.length; i++) {\n        var base = Math.pow(10, prefixes[i][0]);\n        if (x >= base) {\n          prefix = {\n            base: base,\n            power: prefixes[i][0],\n            symbol: prefixes[i][1],\n            name: prefixes[i][2],\n          };\n        } else break;\n      }\n\n      x = x / prefix.base;\n    }\n\n    if (fdigits != null) {\n      x = parseFloat(x.toFixed(fdigits));\n    }\n\n    return x + \" \" + (long ? prefix.name : prefix.symbol) + (unit || \"\");\n  }\n\n  render() {\n    let capacitance =\n      4 * Math.PI * this.VACUUM_PERMITTIVITY * this.state.radius;\n    let charge = capacitance * this.state.voltage;\n    let attractiveForce =\n      this.COULOMBS_CONSTANT *\n      ((charge * charge) / (this.state.distance * this.state.distance));\n    let distanceFromTop = 0.28 - this.state.distance;\n    let repulsiveForce =\n      this.COULOMBS_CONSTANT *\n      ((charge * charge) / (distanceFromTop * distanceFromTop));\n\n    let volume = 0.75 * Math.PI * Math.pow(this.state.radius, 3);\n    let mass = this.WATER_DENSITY * volume;\n    let acceleration = (attractiveForce + repulsiveForce) / mass;\n\n    return (\n      <div className=\"App\">\n        <h3>INPUTS</h3>\n        <div>Voltage (V)</div>\n        <input\n          type=\"text\"\n          value={this.state.voltage}\n          onChange={this.handleVoltageChange}\n        />\n        <br />\n        <div>Drop Radius (m)</div>\n        <input\n          type=\"text\"\n          value={this.state.radius}\n          onChange={this.handleRadiusChange}\n        />\n        <br />\n        <div>Distance From Can Bottom (m)</div>\n        <i>{this.state.distance} m</i>\n        <Slider\n          step={0.01}\n          max={0.27}\n          min={0.01}\n          value={this.state.distance}\n          onChange={this.handleDistanceChange}\n          valueLabelDisplay=\"off\"\n        />\n        <div className=\"slider-label\">\n          <div className=\"left\">Near Bottom of Can</div>\n          <div className=\"right\">Near Human</div>\n        </div>\n        <h3>OUTPUTS</h3>\n        <div>\n          Drop Self Capicitance:{\" \"}\n          <b>{this.formatMetric(capacitance, \"F\", this.DIGITS)}</b>\n        </div>\n        <div>\n          Charge on Drop: <b>{this.formatMetric(charge, \"C\", this.DIGITS)}</b>\n        </div>\n        <div>\n          Electrostatic Attraction:{\" \"}\n          <b>{this.formatMetric(attractiveForce, \"N\", this.DIGITS)}</b>\n        </div>\n        <div>\n          Electrostatic Repulsion:{\" \"}\n          <b>{this.formatMetric(repulsiveForce, \"N\", this.DIGITS)}</b>\n        </div>\n        <div>\n          Drop Mass: <b>{this.formatMetric(mass, \"g\", this.DIGITS)}</b>\n        </div>\n        <div>\n          Net Acceleration: <b>{acceleration.toFixed(this.DIGITS + 2)} m/s^2</b>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}